Grammar

    0 $accept: program $end

    1 program: statement_list

    2 statement_list: /* empty */
    3               | statement_list statement

    4 statement: declaration SEMICOLON
    5          | assignment SEMICOLON
    6          | expression SEMICOLON
    7          | BLOCK_COMMENT
    8          | LINE_COMMENT
    9          | BREAK SEMICOLON
   10          | CONTINUE SEMICOLON
   11          | RETURN expression SEMICOLON
   12          | if_statement
   13          | loop_statement
   14          | function_statement
   15          | collection_declaration
   16          | case_statement
   17          | block

   18 if_statement: IF '[' expression ']' block
   19             | if_statement ELSE block
   20             | if_statement ELIF '[' expression ']' block

   21 case_statement: CASE '[' expression ']' case_block

   22 case_block: '{' case_list '}'

   23 case_list: case_item
   24          | case_list case_item

   25 case_item: '[' expression ']' ':' statement
   26          | '[' ']' ':' statement

   27 loop_statement: LOOP_TILL '[' expression ']' block
   28               | LOOP_FOR block

   29 block: '{' statement_list '}'

   30 declaration: CONSTANT_DECLARATION ASSIGN_OP expression
   31            | VARIABLE_DECLARATION
   32            | VARIABLE_DECLARATION ASSIGN_OP expression
   33            | ARRAY_IDENTIFIER

   34 assignment: IDENTIFIER ASSIGN_OP expression

   35 function_statement: FUNCTION block

   36 expression: expr_arithmetic
   37           | expr_bitwise
   38           | expr_conditional
   39           | expr_logical
   40           | primary_expression
   41           | expression MEMBER_ACCESS IDENTIFIER
   42           | ARITHMETIC_OP_MINUS expression

   43 primary_expression: INTEGER
   44                   | FLOAT
   45                   | STRING_LITERAL
   46                   | IDENTIFIER
   47                   | '(' expression ')'
   48                   | '[' expression ']'

   49 expr_arithmetic: expression ARITHMETIC_OP_PLUS expression
   50                | expression ARITHMETIC_OP_MINUS expression
   51                | expression ARITHMETIC_OP_MULT expression
   52                | expression ARITHMETIC_OP_DIV expression

   53 expr_bitwise: expression BITWISE_OP_AND expression
   54             | expression BITWISE_OP_OR expression
   55             | expression BITWISE_OP_XOR expression
   56             | BITWISE_OP_NOT expression

   57 expr_conditional: expression CONDITIONAL_OP_EQ expression
   58                 | expression CONDITIONAL_OP_LT expression
   59                 | expression CONDITIONAL_OP_GT expression
   60                 | expression CONDITIONAL_OP_LE expression
   61                 | expression CONDITIONAL_OP_GE expression

   62 expr_logical: expression LOGICAL_OP_AND expression
   63             | expression LOGICAL_OP_OR expression
   64             | LOGICAL_OP_NOT expression

   65 collection_declaration: COLLECTION_START members_with_newlines '}' SEMICOLON

   66 members_with_newlines: collection_members
   67                      | collection_members ws_or_newlines

   68 collection_members: /* empty */
   69                   | collection_member
   70                   | collection_members ',' collection_member

   71 collection_member: VARIABLE_DECLARATION
   72                  | ARRAY_IDENTIFIER

   73 ws_or_newlines: NEWLINE
   74               | EMPTY_LINE
   75               | ws_or_newlines NEWLINE
   76               | ws_or_newlines EMPTY_LINE


Terminals, with rules where they appear

$end (0) 0
'(' (40) 47
')' (41) 47
',' (44) 70
':' (58) 25 26
'[' (91) 18 20 21 25 26 27 48
']' (93) 18 20 21 25 26 27 48
'{' (123) 22 29
'}' (125) 22 29 65
error (256)
COLLECTION_START (258) 65
NEWLINE (259) 73 75
EMPTY_LINE (260) 74 76
ASSIGN_OP (261) 30 32 34
MEMBER_ACCESS (262) 41
IDENTIFIER (263) 34 41 46
INTEGER (264) 43
FLOAT (265) 44
CONSTANT_DECLARATION (266) 30
VARIABLE_DECLARATION (267) 31 32 71
ARRAY_IDENTIFIER (268) 33 72
FUNCTION (269) 35
LOOP_TILL (270) 27
LOOP_FOR (271) 28
BREAK (272) 9
CONTINUE (273) 10
RETURN (274) 11
IF (275) 18
ELIF (276) 20
ELSE (277) 19
CASE (278) 21
BLOCK_COMMENT (279) 7
LINE_COMMENT (280) 8
SEMICOLON (281) 4 5 6 9 10 11 65
STRING_LITERAL (282) 45
ARITHMETIC_OP_PLUS (283) 49
ARITHMETIC_OP_MINUS (284) 42 50
ARITHMETIC_OP_MULT (285) 51
ARITHMETIC_OP_DIV (286) 52
BITWISE_OP_AND (287) 53
BITWISE_OP_OR (288) 54
BITWISE_OP_NOT (289) 56
BITWISE_OP_XOR (290) 55
CONDITIONAL_OP_EQ (291) 57
CONDITIONAL_OP_LT (292) 58
CONDITIONAL_OP_GT (293) 59
CONDITIONAL_OP_LE (294) 60
CONDITIONAL_OP_GE (295) 61
LOGICAL_OP_AND (296) 62
LOGICAL_OP_OR (297) 63
LOGICAL_OP_NOT (298) 64
THEN (299)
UNARY_MINUS (300)


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
program (55)
    on left: 1, on right: 0
statement_list (56)
    on left: 2 3, on right: 1 3 29
statement (57)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17, on right: 3 25 26
if_statement (58)
    on left: 18 19 20, on right: 12 19 20
case_statement (59)
    on left: 21, on right: 16
case_block (60)
    on left: 22, on right: 21
case_list (61)
    on left: 23 24, on right: 22 24
case_item (62)
    on left: 25 26, on right: 23 24
loop_statement (63)
    on left: 27 28, on right: 13
block (64)
    on left: 29, on right: 17 18 19 20 27 28 35
declaration (65)
    on left: 30 31 32 33, on right: 4
assignment (66)
    on left: 34, on right: 5
function_statement (67)
    on left: 35, on right: 14
expression (68)
    on left: 36 37 38 39 40 41 42, on right: 6 11 18 20 21 25 27 30
    32 34 41 42 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63
    64
primary_expression (69)
    on left: 43 44 45 46 47 48, on right: 40
expr_arithmetic (70)
    on left: 49 50 51 52, on right: 36
expr_bitwise (71)
    on left: 53 54 55 56, on right: 37
expr_conditional (72)
    on left: 57 58 59 60 61, on right: 38
expr_logical (73)
    on left: 62 63 64, on right: 39
collection_declaration (74)
    on left: 65, on right: 15
members_with_newlines (75)
    on left: 66 67, on right: 65
collection_members (76)
    on left: 68 69 70, on right: 66 67 70
collection_member (77)
    on left: 71 72, on right: 69 70
ws_or_newlines (78)
    on left: 73 74 75 76, on right: 67 75 76


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (statement_list)

    program         go to state 1
    statement_list  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: statement_list .
    3 statement_list: statement_list . statement

    COLLECTION_START      shift, and go to state 4
    IDENTIFIER            shift, and go to state 5
    INTEGER               shift, and go to state 6
    FLOAT                 shift, and go to state 7
    CONSTANT_DECLARATION  shift, and go to state 8
    VARIABLE_DECLARATION  shift, and go to state 9
    ARRAY_IDENTIFIER      shift, and go to state 10
    FUNCTION              shift, and go to state 11
    LOOP_TILL             shift, and go to state 12
    LOOP_FOR              shift, and go to state 13
    BREAK                 shift, and go to state 14
    CONTINUE              shift, and go to state 15
    RETURN                shift, and go to state 16
    IF                    shift, and go to state 17
    CASE                  shift, and go to state 18
    BLOCK_COMMENT         shift, and go to state 19
    LINE_COMMENT          shift, and go to state 20
    STRING_LITERAL        shift, and go to state 21
    ARITHMETIC_OP_MINUS   shift, and go to state 22
    BITWISE_OP_NOT        shift, and go to state 23
    LOGICAL_OP_NOT        shift, and go to state 24
    '('                   shift, and go to state 25
    '['                   shift, and go to state 26
    '{'                   shift, and go to state 27

    $default  reduce using rule 1 (program)

    statement               go to state 28
    if_statement            go to state 29
    case_statement          go to state 30
    loop_statement          go to state 31
    block                   go to state 32
    declaration             go to state 33
    assignment              go to state 34
    function_statement      go to state 35
    expression              go to state 36
    primary_expression      go to state 37
    expr_arithmetic         go to state 38
    expr_bitwise            go to state 39
    expr_conditional        go to state 40
    expr_logical            go to state 41
    collection_declaration  go to state 42


state 3

    0 $accept: program $end .

    $default  accept


state 4

   65 collection_declaration: COLLECTION_START . members_with_newlines '}' SEMICOLON

    VARIABLE_DECLARATION  shift, and go to state 43
    ARRAY_IDENTIFIER      shift, and go to state 44

    $default  reduce using rule 68 (collection_members)

    members_with_newlines  go to state 45
    collection_members     go to state 46
    collection_member      go to state 47


state 5

   34 assignment: IDENTIFIER . ASSIGN_OP expression
   46 primary_expression: IDENTIFIER .

    ASSIGN_OP  shift, and go to state 48

    $default  reduce using rule 46 (primary_expression)


state 6

   43 primary_expression: INTEGER .

    $default  reduce using rule 43 (primary_expression)


state 7

   44 primary_expression: FLOAT .

    $default  reduce using rule 44 (primary_expression)


state 8

   30 declaration: CONSTANT_DECLARATION . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 49


state 9

   31 declaration: VARIABLE_DECLARATION .
   32            | VARIABLE_DECLARATION . ASSIGN_OP expression

    ASSIGN_OP  shift, and go to state 50

    $default  reduce using rule 31 (declaration)


state 10

   33 declaration: ARRAY_IDENTIFIER .

    $default  reduce using rule 33 (declaration)


state 11

   35 function_statement: FUNCTION . block

    '{'  shift, and go to state 27

    block  go to state 51


state 12

   27 loop_statement: LOOP_TILL . '[' expression ']' block

    '['  shift, and go to state 52


state 13

   28 loop_statement: LOOP_FOR . block

    '{'  shift, and go to state 27

    block  go to state 53


state 14

    9 statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 54


state 15

   10 statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 55


state 16

   11 statement: RETURN . expression SEMICOLON

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 57
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 17

   18 if_statement: IF . '[' expression ']' block

    '['  shift, and go to state 58


state 18

   21 case_statement: CASE . '[' expression ']' case_block

    '['  shift, and go to state 59


state 19

    7 statement: BLOCK_COMMENT .

    $default  reduce using rule 7 (statement)


state 20

    8 statement: LINE_COMMENT .

    $default  reduce using rule 8 (statement)


state 21

   45 primary_expression: STRING_LITERAL .

    $default  reduce using rule 45 (primary_expression)


state 22

   42 expression: ARITHMETIC_OP_MINUS . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 60
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 23

   56 expr_bitwise: BITWISE_OP_NOT . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 61
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 24

   64 expr_logical: LOGICAL_OP_NOT . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 62
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 25

   47 primary_expression: '(' . expression ')'

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 63
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 26

   48 primary_expression: '[' . expression ']'

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 64
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 27

   29 block: '{' . statement_list '}'

    $default  reduce using rule 2 (statement_list)

    statement_list  go to state 65


state 28

    3 statement_list: statement_list statement .

    $default  reduce using rule 3 (statement_list)


state 29

   12 statement: if_statement .
   19 if_statement: if_statement . ELSE block
   20             | if_statement . ELIF '[' expression ']' block

    ELIF  shift, and go to state 66
    ELSE  shift, and go to state 67

    $default  reduce using rule 12 (statement)


state 30

   16 statement: case_statement .

    $default  reduce using rule 16 (statement)


state 31

   13 statement: loop_statement .

    $default  reduce using rule 13 (statement)


state 32

   17 statement: block .

    $default  reduce using rule 17 (statement)


state 33

    4 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 68


state 34

    5 statement: assignment . SEMICOLON

    SEMICOLON  shift, and go to state 69


state 35

   14 statement: function_statement .

    $default  reduce using rule 14 (statement)


state 36

    6 statement: expression . SEMICOLON
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    SEMICOLON            shift, and go to state 71
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85


state 37

   40 expression: primary_expression .

    $default  reduce using rule 40 (expression)


state 38

   36 expression: expr_arithmetic .

    $default  reduce using rule 36 (expression)


state 39

   37 expression: expr_bitwise .

    $default  reduce using rule 37 (expression)


state 40

   38 expression: expr_conditional .

    $default  reduce using rule 38 (expression)


state 41

   39 expression: expr_logical .

    $default  reduce using rule 39 (expression)


state 42

   15 statement: collection_declaration .

    $default  reduce using rule 15 (statement)


state 43

   71 collection_member: VARIABLE_DECLARATION .

    $default  reduce using rule 71 (collection_member)


state 44

   72 collection_member: ARRAY_IDENTIFIER .

    $default  reduce using rule 72 (collection_member)


state 45

   65 collection_declaration: COLLECTION_START members_with_newlines . '}' SEMICOLON

    '}'  shift, and go to state 86


state 46

   66 members_with_newlines: collection_members .
   67                      | collection_members . ws_or_newlines
   70 collection_members: collection_members . ',' collection_member

    NEWLINE     shift, and go to state 87
    EMPTY_LINE  shift, and go to state 88
    ','         shift, and go to state 89

    $default  reduce using rule 66 (members_with_newlines)

    ws_or_newlines  go to state 90


state 47

   69 collection_members: collection_member .

    $default  reduce using rule 69 (collection_members)


state 48

   34 assignment: IDENTIFIER ASSIGN_OP . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 91
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 49

   30 declaration: CONSTANT_DECLARATION ASSIGN_OP . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 92
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 50

   32 declaration: VARIABLE_DECLARATION ASSIGN_OP . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 93
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 51

   35 function_statement: FUNCTION block .

    $default  reduce using rule 35 (function_statement)


state 52

   27 loop_statement: LOOP_TILL '[' . expression ']' block

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 94
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 53

   28 loop_statement: LOOP_FOR block .

    $default  reduce using rule 28 (loop_statement)


state 54

    9 statement: BREAK SEMICOLON .

    $default  reduce using rule 9 (statement)


state 55

   10 statement: CONTINUE SEMICOLON .

    $default  reduce using rule 10 (statement)


state 56

   46 primary_expression: IDENTIFIER .

    $default  reduce using rule 46 (primary_expression)


state 57

   11 statement: RETURN expression . SEMICOLON
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    SEMICOLON            shift, and go to state 95
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85


state 58

   18 if_statement: IF '[' . expression ']' block

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 96
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 59

   21 case_statement: CASE '[' . expression ']' case_block

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 97
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 60

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   42           | ARITHMETIC_OP_MINUS expression .
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    $default  reduce using rule 42 (expression)


state 61

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   56             | BITWISE_OP_NOT expression .
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    $default  reduce using rule 56 (expr_bitwise)


state 62

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression
   64             | LOGICAL_OP_NOT expression .

    $default  reduce using rule 64 (expr_logical)


state 63

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   47 primary_expression: '(' expression . ')'
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85
    ')'                  shift, and go to state 98


state 64

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   48 primary_expression: '[' expression . ']'
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85
    ']'                  shift, and go to state 99


state 65

    3 statement_list: statement_list . statement
   29 block: '{' statement_list . '}'

    COLLECTION_START      shift, and go to state 4
    IDENTIFIER            shift, and go to state 5
    INTEGER               shift, and go to state 6
    FLOAT                 shift, and go to state 7
    CONSTANT_DECLARATION  shift, and go to state 8
    VARIABLE_DECLARATION  shift, and go to state 9
    ARRAY_IDENTIFIER      shift, and go to state 10
    FUNCTION              shift, and go to state 11
    LOOP_TILL             shift, and go to state 12
    LOOP_FOR              shift, and go to state 13
    BREAK                 shift, and go to state 14
    CONTINUE              shift, and go to state 15
    RETURN                shift, and go to state 16
    IF                    shift, and go to state 17
    CASE                  shift, and go to state 18
    BLOCK_COMMENT         shift, and go to state 19
    LINE_COMMENT          shift, and go to state 20
    STRING_LITERAL        shift, and go to state 21
    ARITHMETIC_OP_MINUS   shift, and go to state 22
    BITWISE_OP_NOT        shift, and go to state 23
    LOGICAL_OP_NOT        shift, and go to state 24
    '('                   shift, and go to state 25
    '['                   shift, and go to state 26
    '{'                   shift, and go to state 27
    '}'                   shift, and go to state 100

    statement               go to state 28
    if_statement            go to state 29
    case_statement          go to state 30
    loop_statement          go to state 31
    block                   go to state 32
    declaration             go to state 33
    assignment              go to state 34
    function_statement      go to state 35
    expression              go to state 36
    primary_expression      go to state 37
    expr_arithmetic         go to state 38
    expr_bitwise            go to state 39
    expr_conditional        go to state 40
    expr_logical            go to state 41
    collection_declaration  go to state 42


state 66

   20 if_statement: if_statement ELIF . '[' expression ']' block

    '['  shift, and go to state 101


state 67

   19 if_statement: if_statement ELSE . block

    '{'  shift, and go to state 27

    block  go to state 102


state 68

    4 statement: declaration SEMICOLON .

    $default  reduce using rule 4 (statement)


state 69

    5 statement: assignment SEMICOLON .

    $default  reduce using rule 5 (statement)


state 70

   41 expression: expression MEMBER_ACCESS . IDENTIFIER

    IDENTIFIER  shift, and go to state 103


state 71

    6 statement: expression SEMICOLON .

    $default  reduce using rule 6 (statement)


state 72

   49 expr_arithmetic: expression ARITHMETIC_OP_PLUS . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 104
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 73

   50 expr_arithmetic: expression ARITHMETIC_OP_MINUS . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 105
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 74

   51 expr_arithmetic: expression ARITHMETIC_OP_MULT . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 106
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 75

   52 expr_arithmetic: expression ARITHMETIC_OP_DIV . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 107
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 76

   53 expr_bitwise: expression BITWISE_OP_AND . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 108
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 77

   54 expr_bitwise: expression BITWISE_OP_OR . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 109
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 78

   55 expr_bitwise: expression BITWISE_OP_XOR . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 110
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 79

   57 expr_conditional: expression CONDITIONAL_OP_EQ . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 111
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 80

   58 expr_conditional: expression CONDITIONAL_OP_LT . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 112
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 81

   59 expr_conditional: expression CONDITIONAL_OP_GT . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 113
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 82

   60 expr_conditional: expression CONDITIONAL_OP_LE . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 114
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 83

   61 expr_conditional: expression CONDITIONAL_OP_GE . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 115
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 84

   62 expr_logical: expression LOGICAL_OP_AND . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 116
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 85

   63 expr_logical: expression LOGICAL_OP_OR . expression

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 117
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 86

   65 collection_declaration: COLLECTION_START members_with_newlines '}' . SEMICOLON

    SEMICOLON  shift, and go to state 118


state 87

   73 ws_or_newlines: NEWLINE .

    $default  reduce using rule 73 (ws_or_newlines)


state 88

   74 ws_or_newlines: EMPTY_LINE .

    $default  reduce using rule 74 (ws_or_newlines)


state 89

   70 collection_members: collection_members ',' . collection_member

    VARIABLE_DECLARATION  shift, and go to state 43
    ARRAY_IDENTIFIER      shift, and go to state 44

    collection_member  go to state 119


state 90

   67 members_with_newlines: collection_members ws_or_newlines .
   75 ws_or_newlines: ws_or_newlines . NEWLINE
   76               | ws_or_newlines . EMPTY_LINE

    NEWLINE     shift, and go to state 120
    EMPTY_LINE  shift, and go to state 121

    $default  reduce using rule 67 (members_with_newlines)


state 91

   34 assignment: IDENTIFIER ASSIGN_OP expression .
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85

    $default  reduce using rule 34 (assignment)


state 92

   30 declaration: CONSTANT_DECLARATION ASSIGN_OP expression .
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85

    $default  reduce using rule 30 (declaration)


state 93

   32 declaration: VARIABLE_DECLARATION ASSIGN_OP expression .
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85

    $default  reduce using rule 32 (declaration)


state 94

   27 loop_statement: LOOP_TILL '[' expression . ']' block
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85
    ']'                  shift, and go to state 122


state 95

   11 statement: RETURN expression SEMICOLON .

    $default  reduce using rule 11 (statement)


state 96

   18 if_statement: IF '[' expression . ']' block
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85
    ']'                  shift, and go to state 123


state 97

   21 case_statement: CASE '[' expression . ']' case_block
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85
    ']'                  shift, and go to state 124


state 98

   47 primary_expression: '(' expression ')' .

    $default  reduce using rule 47 (primary_expression)


state 99

   48 primary_expression: '[' expression ']' .

    $default  reduce using rule 48 (primary_expression)


state 100

   29 block: '{' statement_list '}' .

    $default  reduce using rule 29 (block)


state 101

   20 if_statement: if_statement ELIF '[' . expression ']' block

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26

    expression          go to state 125
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 102

   19 if_statement: if_statement ELSE block .

    $default  reduce using rule 19 (if_statement)


state 103

   41 expression: expression MEMBER_ACCESS IDENTIFIER .

    $default  reduce using rule 41 (expression)


state 104

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   49                | expression ARITHMETIC_OP_PLUS expression .
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_MULT  shift, and go to state 74
    ARITHMETIC_OP_DIV   shift, and go to state 75

    $default  reduce using rule 49 (expr_arithmetic)


state 105

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   50                | expression ARITHMETIC_OP_MINUS expression .
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_MULT  shift, and go to state 74
    ARITHMETIC_OP_DIV   shift, and go to state 75

    $default  reduce using rule 50 (expr_arithmetic)


state 106

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   51                | expression ARITHMETIC_OP_MULT expression .
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    $default  reduce using rule 51 (expr_arithmetic)


state 107

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   52                | expression ARITHMETIC_OP_DIV expression .
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    $default  reduce using rule 52 (expr_arithmetic)


state 108

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   53             | expression BITWISE_OP_AND expression .
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83

    $default  reduce using rule 53 (expr_bitwise)


state 109

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   54             | expression BITWISE_OP_OR expression .
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83

    $default  reduce using rule 54 (expr_bitwise)


state 110

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   55             | expression BITWISE_OP_XOR expression .
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83

    $default  reduce using rule 55 (expr_bitwise)


state 111

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   57                 | expression CONDITIONAL_OP_EQ expression .
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83

    $default  reduce using rule 57 (expr_conditional)


state 112

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   58                 | expression CONDITIONAL_OP_LT expression .
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75

    $default  reduce using rule 58 (expr_conditional)


state 113

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   59                 | expression CONDITIONAL_OP_GT expression .
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75

    $default  reduce using rule 59 (expr_conditional)


state 114

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   60                 | expression CONDITIONAL_OP_LE expression .
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75

    $default  reduce using rule 60 (expr_conditional)


state 115

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   61                 | expression CONDITIONAL_OP_GE expression .
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75

    $default  reduce using rule 61 (expr_conditional)


state 116

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   62             | expression LOGICAL_OP_AND expression .
   63             | expression . LOGICAL_OP_OR expression

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83

    $default  reduce using rule 62 (expr_logical)


state 117

   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression
   63             | expression LOGICAL_OP_OR expression .

    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84

    $default  reduce using rule 63 (expr_logical)


state 118

   65 collection_declaration: COLLECTION_START members_with_newlines '}' SEMICOLON .

    $default  reduce using rule 65 (collection_declaration)


state 119

   70 collection_members: collection_members ',' collection_member .

    $default  reduce using rule 70 (collection_members)


state 120

   75 ws_or_newlines: ws_or_newlines NEWLINE .

    $default  reduce using rule 75 (ws_or_newlines)


state 121

   76 ws_or_newlines: ws_or_newlines EMPTY_LINE .

    $default  reduce using rule 76 (ws_or_newlines)


state 122

   27 loop_statement: LOOP_TILL '[' expression ']' . block

    '{'  shift, and go to state 27

    block  go to state 126


state 123

   18 if_statement: IF '[' expression ']' . block

    '{'  shift, and go to state 27

    block  go to state 127


state 124

   21 case_statement: CASE '[' expression ']' . case_block

    '{'  shift, and go to state 128

    case_block  go to state 129


state 125

   20 if_statement: if_statement ELIF '[' expression . ']' block
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85
    ']'                  shift, and go to state 130


state 126

   27 loop_statement: LOOP_TILL '[' expression ']' block .

    $default  reduce using rule 27 (loop_statement)


state 127

   18 if_statement: IF '[' expression ']' block .

    $default  reduce using rule 18 (if_statement)


state 128

   22 case_block: '{' . case_list '}'

    '['  shift, and go to state 131

    case_list  go to state 132
    case_item  go to state 133


state 129

   21 case_statement: CASE '[' expression ']' case_block .

    $default  reduce using rule 21 (case_statement)


state 130

   20 if_statement: if_statement ELIF '[' expression ']' . block

    '{'  shift, and go to state 27

    block  go to state 134


state 131

   25 case_item: '[' . expression ']' ':' statement
   26          | '[' . ']' ':' statement

    IDENTIFIER           shift, and go to state 56
    INTEGER              shift, and go to state 6
    FLOAT                shift, and go to state 7
    STRING_LITERAL       shift, and go to state 21
    ARITHMETIC_OP_MINUS  shift, and go to state 22
    BITWISE_OP_NOT       shift, and go to state 23
    LOGICAL_OP_NOT       shift, and go to state 24
    '('                  shift, and go to state 25
    '['                  shift, and go to state 26
    ']'                  shift, and go to state 135

    expression          go to state 136
    primary_expression  go to state 37
    expr_arithmetic     go to state 38
    expr_bitwise        go to state 39
    expr_conditional    go to state 40
    expr_logical        go to state 41


state 132

   22 case_block: '{' case_list . '}'
   24 case_list: case_list . case_item

    '['  shift, and go to state 131
    '}'  shift, and go to state 137

    case_item  go to state 138


state 133

   23 case_list: case_item .

    $default  reduce using rule 23 (case_list)


state 134

   20 if_statement: if_statement ELIF '[' expression ']' block .

    $default  reduce using rule 20 (if_statement)


state 135

   26 case_item: '[' ']' . ':' statement

    ':'  shift, and go to state 139


state 136

   25 case_item: '[' expression . ']' ':' statement
   41 expression: expression . MEMBER_ACCESS IDENTIFIER
   49 expr_arithmetic: expression . ARITHMETIC_OP_PLUS expression
   50                | expression . ARITHMETIC_OP_MINUS expression
   51                | expression . ARITHMETIC_OP_MULT expression
   52                | expression . ARITHMETIC_OP_DIV expression
   53 expr_bitwise: expression . BITWISE_OP_AND expression
   54             | expression . BITWISE_OP_OR expression
   55             | expression . BITWISE_OP_XOR expression
   57 expr_conditional: expression . CONDITIONAL_OP_EQ expression
   58                 | expression . CONDITIONAL_OP_LT expression
   59                 | expression . CONDITIONAL_OP_GT expression
   60                 | expression . CONDITIONAL_OP_LE expression
   61                 | expression . CONDITIONAL_OP_GE expression
   62 expr_logical: expression . LOGICAL_OP_AND expression
   63             | expression . LOGICAL_OP_OR expression

    MEMBER_ACCESS        shift, and go to state 70
    ARITHMETIC_OP_PLUS   shift, and go to state 72
    ARITHMETIC_OP_MINUS  shift, and go to state 73
    ARITHMETIC_OP_MULT   shift, and go to state 74
    ARITHMETIC_OP_DIV    shift, and go to state 75
    BITWISE_OP_AND       shift, and go to state 76
    BITWISE_OP_OR        shift, and go to state 77
    BITWISE_OP_XOR       shift, and go to state 78
    CONDITIONAL_OP_EQ    shift, and go to state 79
    CONDITIONAL_OP_LT    shift, and go to state 80
    CONDITIONAL_OP_GT    shift, and go to state 81
    CONDITIONAL_OP_LE    shift, and go to state 82
    CONDITIONAL_OP_GE    shift, and go to state 83
    LOGICAL_OP_AND       shift, and go to state 84
    LOGICAL_OP_OR        shift, and go to state 85
    ']'                  shift, and go to state 140


state 137

   22 case_block: '{' case_list '}' .

    $default  reduce using rule 22 (case_block)


state 138

   24 case_list: case_list case_item .

    $default  reduce using rule 24 (case_list)


state 139

   26 case_item: '[' ']' ':' . statement

    COLLECTION_START      shift, and go to state 4
    IDENTIFIER            shift, and go to state 5
    INTEGER               shift, and go to state 6
    FLOAT                 shift, and go to state 7
    CONSTANT_DECLARATION  shift, and go to state 8
    VARIABLE_DECLARATION  shift, and go to state 9
    ARRAY_IDENTIFIER      shift, and go to state 10
    FUNCTION              shift, and go to state 11
    LOOP_TILL             shift, and go to state 12
    LOOP_FOR              shift, and go to state 13
    BREAK                 shift, and go to state 14
    CONTINUE              shift, and go to state 15
    RETURN                shift, and go to state 16
    IF                    shift, and go to state 17
    CASE                  shift, and go to state 18
    BLOCK_COMMENT         shift, and go to state 19
    LINE_COMMENT          shift, and go to state 20
    STRING_LITERAL        shift, and go to state 21
    ARITHMETIC_OP_MINUS   shift, and go to state 22
    BITWISE_OP_NOT        shift, and go to state 23
    LOGICAL_OP_NOT        shift, and go to state 24
    '('                   shift, and go to state 25
    '['                   shift, and go to state 26
    '{'                   shift, and go to state 27

    statement               go to state 141
    if_statement            go to state 29
    case_statement          go to state 30
    loop_statement          go to state 31
    block                   go to state 32
    declaration             go to state 33
    assignment              go to state 34
    function_statement      go to state 35
    expression              go to state 36
    primary_expression      go to state 37
    expr_arithmetic         go to state 38
    expr_bitwise            go to state 39
    expr_conditional        go to state 40
    expr_logical            go to state 41
    collection_declaration  go to state 42


state 140

   25 case_item: '[' expression ']' . ':' statement

    ':'  shift, and go to state 142


state 141

   26 case_item: '[' ']' ':' statement .

    $default  reduce using rule 26 (case_item)


state 142

   25 case_item: '[' expression ']' ':' . statement

    COLLECTION_START      shift, and go to state 4
    IDENTIFIER            shift, and go to state 5
    INTEGER               shift, and go to state 6
    FLOAT                 shift, and go to state 7
    CONSTANT_DECLARATION  shift, and go to state 8
    VARIABLE_DECLARATION  shift, and go to state 9
    ARRAY_IDENTIFIER      shift, and go to state 10
    FUNCTION              shift, and go to state 11
    LOOP_TILL             shift, and go to state 12
    LOOP_FOR              shift, and go to state 13
    BREAK                 shift, and go to state 14
    CONTINUE              shift, and go to state 15
    RETURN                shift, and go to state 16
    IF                    shift, and go to state 17
    CASE                  shift, and go to state 18
    BLOCK_COMMENT         shift, and go to state 19
    LINE_COMMENT          shift, and go to state 20
    STRING_LITERAL        shift, and go to state 21
    ARITHMETIC_OP_MINUS   shift, and go to state 22
    BITWISE_OP_NOT        shift, and go to state 23
    LOGICAL_OP_NOT        shift, and go to state 24
    '('                   shift, and go to state 25
    '['                   shift, and go to state 26
    '{'                   shift, and go to state 27

    statement               go to state 143
    if_statement            go to state 29
    case_statement          go to state 30
    loop_statement          go to state 31
    block                   go to state 32
    declaration             go to state 33
    assignment              go to state 34
    function_statement      go to state 35
    expression              go to state 36
    primary_expression      go to state 37
    expr_arithmetic         go to state 38
    expr_bitwise            go to state 39
    expr_conditional        go to state 40
    expr_logical            go to state 41
    collection_declaration  go to state 42


state 143

   25 case_item: '[' expression ']' ':' statement .

    $default  reduce using rule 25 (case_item)

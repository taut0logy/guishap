# Sample Guishap Program. This is a line comment
## 
This is a demonstration of the Guishap programming language
featuring all major language constructs. this is a block comment
##

# Define a collection
# collection members are separated by commas, and must contain data type. these can be variables, constants or arrays of variables or constants
col Student {
    _name%string,
    _age%int,
    _grades%float[]
};

# Variables declaration, these are mutable values. may or may not be initialized at declaration, and start with an underscore
# The data type is separated by a % symbol
# The data type can be a primitive type, a collection, or an array of primitive types or collections
# The data type can be followed by a default value, which is optional
# The assignment operator is a colon
_name%string:"";

# Constants declaration, these are immutable values. must be initialized at declaration, and start with two underscores
__PI%float:3.14159;
__MAX_STUDENTS%int:100;

# Function
# Functions are defined using the shap keyword followed by the function name and parameters in parentheses
# The return type is specified after the closing parenthesis seperated by a > symbol, followed by the function body in curly braces
# The ret statement is used to return a value from the function
# The function body can contain variable declarations, assignments, conditional statements, loops, and function calls
# The function body can also contain mathematical and bitwise operations

shap calcAvg (_grades%float[])>float {
    _sum%float:0.0;
    _count%int:0;
    
    loop count for [0..2..1] {
        sum:sum+grades[count];
        count:count+1;
    }
    
    ret sum/count;
}

# Function and case
# The case statement is used to define a switch-case statement
# The case statement is followed by an expression in square brackets
# The case statement can have multiple cases, each followed by a colon
# The case statement can have a default case, which is an empty square brackets
# The case statement can have a break statement to exit the case block
# The case statement can have a continue statement to skip the rest of the current iteration

shap getGrade (_score%float)>string {
    case [score] {
        [90.0]: ret "A";
        [80.0]: ret "B";
        [70.0]: ret "C";
        [60.0]: ret "D";
        []: ret "F";
    }
}

# Main function
# The main function is the entry point of the program
# The main function must be defined in the program
# The main function does not take any parameters
# The main function returns an integer value

shap main ()>int {
    # Variable declarations
    _student%Student:{
        name:"John Doe",
        age:20,
        grades:[85.5, 90.0, 88.5]
    };
    
    _average%float:0.0;
    _grade%string:"";
    
    average:calcAvg(student.grades);
    
    grade:getGrade(average);
    
    # Conditional statement
    if [average >= 90.0] {
        # Print high achiever message
        _message%string:"Excellent performance!";
        print(message);
    } elif [average >= 80.0] {
        _message%string:"Good job!";
        print(message);
    } else {
        _message%string:"Keep working hard!";
        print(message);
    }
    
    
    # Loop example
    _scores%float[]:[78.5, 82.0, 91.5, 88.0, 95.0];
    _sum%float:0.0;
    
    # Using till loop
    _i%int:0;
    loop till [i < 5] {
        sum: sum + scores[i];
        if [scores[i] > 90.0] {
            continue;  # Skip the rest of this iteration
        }
        i: i + 1;
    }
    
    # Using for loop with array
    loop _i%int for [0..4..1] {
        if [scores[i] < 80.0] {
            break;  # Exit the loop
        }
    }
    
    # Bitwise operations example
    _flags%int:5;
    _mask%int:3;
    _result%int:flags & mask;
    
    # Mathematical operations
    _circle_area%float:PI * radius ^ 2;
    _remainder%int:17 % 5;
    
    ret 0;
}